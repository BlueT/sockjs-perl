=pod

=head1 NAME

SockJS-perl - a SockJS Perl Plack/PSGI implementation

=head1 DESCRIPTION

=head2 Supported transports

Work's still in progress.

    WebSocket (hixie-75, hixie-76/hybi-00, hybi-10, hybi-17 and various tweaks)
    XHR Polling/Streaming
    EventSource

=head2 The Client-Side Part

SockJS client is required. You can get it from
L<http://sockjs.github.com/sockjs-client>.

    <script src="http://cdn.sockjs.org/sockjs-0.2.1.min.js"></script>

    <script>
      var sock = new SockJS("http://mydomain.com/my_prefix");

      sock.onopen = function() {
        console.log("open");
      };

      sock.onmessage = function(e) {
        console.log("message", e.data);
      };

      sock.onclose = function() {
        console.log("close");
      };
    </script>

=head2 The Server-Side Part

This is a testable server.

    #!/usr/bin/env perl

    use strict;
    use warnings;

    use Plack::Builder;
    use SockJS;

    my $echo = sub {
        my ($session) = @_;

        $session->on(
            'data' => sub {
                my $session = shift;

                $session->write(@_);
            }
        );
    };

    builder {
        mount '/echo' => SockJS->new(handler => $echo);

        mount '/disabled_websocket_echo' =>
          SockJS->new(handler => $echo, websocket => 0);

        mount '/cookie_needed_echo' => SockJS->new(handler => $echo, cookie => 1);

        mount '/close' => SockJS->new(
            handler => sub {
                my $session = shift;

                $session->close(3000, 'Go away!');
            }
        );

        mount '/' => sub {
            my $env = shift;

            if ($env->{PATH_INFO} ne '/') {
                return [404, [], ['Not found']];
            }

            return [200, [], [<<'EOF']];
    <script src="http://cdn.sockjs.org/sockjs-0.2.1.min.js"></script>

    <script>
      var sock = new SockJS('http://localhost:8081/echo');

      sock.onopen = function() {
        console.log("open");
      };

      sock.onmessage = function(e) {
        console.log("message", e.data);
      };

      sock.onclose = function() {
        console.log("close");
      };
    </script>
    EOF
          }
    };

You can run SockJS tests againts the example server.

=head2 Running SockJS tests

Clone L<http://github.com/sockjs/sockjs-protocol> and follow install
instructions.

    # Run all the tests.
    ./venv/bin/python sockjs-protocol-dev.py

    # Run all the tests defined in XhrStreaming.
    ./venv/bin/python sockjs-protocol-dev.py XhrStreaming

    # Run only XhrStreaming.test_transport test.
    ./venv/bin/python sockjs-protocol-dev.py XhrStreaming.test_transport

=head1 AUTHOR

Viacheslav Tykhanovskyi, "vti@cpan.org".

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2012, Viacheslav Tykhanovskyi

This program is free software, you can redistribute it and/or modify it under
the terms of the Artistic License version 2.0.
